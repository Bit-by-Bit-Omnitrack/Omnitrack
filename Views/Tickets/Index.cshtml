@model IEnumerable<UserRoles.Models.Ticket>
@{
    ViewData["Title"] = "Tickets Dashboard";
    var statuses = (List<UserRoles.Models.TicketStatus>)ViewBag.Statuses;
    var tasksFilter = (SelectList)ViewBag.TasksFilter;
    var currentFilterTaskId = Context.Request.Query["filterTaskId"];
    var currentTaskName = "";
    if (!string.IsNullOrEmpty(currentFilterTaskId) && tasksFilter != null)
    {
        var selectedTask = tasksFilter.FirstOrDefault(t => t.Value == currentFilterTaskId);
        if (selectedTask != null)
        {
            currentTaskName = selectedTask.Text;
        }
    }
}

<div class="container-fluid my-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3 fw-bold text-primary">
            <i class="fas fa-columns me-2"></i> Tickets Dashboard
            @(!string.IsNullOrEmpty(currentTaskName) ? $" - Task: {currentTaskName}" : "")
        </h1>
        <a asp-action="Create" class="btn btn-success">
            <i class="fas fa-plus-circle me-1"></i> New Ticket
        </a>
    </div>

  @*  <form asp-action="Index" method="get" class="row g-2 mb-4 align-items-center">
        <div class="col-auto">
            <label for="filterTaskId" class="col-form-label fw-bold">Filter by Task:</label>
        </div>
        <div class="col-auto">
            <select name="filterTaskId" id="filterTaskId" class="form-select">
                <option value="">All Tasks</option>
                @foreach (var taskOption in tasksFilter)
                {
                    <option value="@taskOption.Value" selected="@(taskOption.Selected)">
                        @taskOption.Text
                    </option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-outline-primary">
                <i class="fas fa-filter me-1"></i> Apply Filter
            </button>
        </div>
    </form>*@
    <div class="kanban-scroll-wrapper mb-4">
        <div class="kanban-board d-flex flex-nowrap">
            @foreach (var status in statuses)
            {
                <div class="kanban-column card me-3 flex-shrink-0 shadow-sm border-0"
                     id="status-@status.Id"
                     data-status-id="@status.Id"
                     style="min-width: 300px; max-width: 320px;">
                    <div class="card-header bg-light border-bottom fw-semibold text-dark">
                        <i class="fas fa-circle text-secondary me-2"></i>@status.StatusName
                    </div>
                    <div class="card-body kanban-cards p-2" style="min-height: 300px; max-height: 75vh; overflow-y: auto;">
                        @foreach (var item in Model.Where(t => t.StatusID == status.Id))
                        {
                            <div class="kanban-card draggable card border-0 mb-2 shadow-sm" draggable="true" data-ticket-id="@item.Id">
                                <div class="card-body p-2">
                                    <h5 class="card-title fw-bold">@item.Title</h5>
                                    <p class="card-text mb-1"><i class="fas fa-user me-1 text-muted"></i><strong>Assigned:</strong> @(item.AssignedToUser?.UserName ?? "N/A")</p>
                                    <p class="card-text mb-1"><i class="fas fa-layer-group me-1 text-muted"></i><strong>Priority:</strong> @(item.Priority?.Name ?? "N/A")</p>
                                    <p class="card-text mb-1"><i class="fas fa-tasks me-1 text-muted"></i><strong>Task:</strong> @(item.Tasks?.Name ?? "N/A")</p>
                                    <p class="card-text"><i class="fas fa-calendar-alt me-1 text-muted"></i><strong>Due:</strong> @(item.DueDate?.ToShortDateString() ?? "N/A")</p>
                                    <div class="text-end mt-2">
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-secondary">Details</a>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-warning">Edit</a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            let draggedItem = null;

            // Make cards draggable
            document.querySelectorAll('.draggable').forEach(item => {
                item.addEventListener('dragstart', (e) => {
                    draggedItem = item;
                    e.dataTransfer.setData('text/plain', item.dataset.ticketId); // Store ticket ID
                    setTimeout(() => {
                        item.classList.add('dragging'); // Add a class for styling while dragging
                    }, 0);
                });

                item.addEventListener('dragend', () => {
                    draggedItem.classList.remove('dragging');
                    draggedItem = null;
                });
            });

            // Make columns droppable
            document.querySelectorAll('.kanban-column').forEach(column => {
                column.addEventListener('dragover', (e) => {
                    e.preventDefault(); // Allow drop
                    const kanbanCards = column.querySelector('.kanban-cards');
                    if (kanbanCards && draggedItem) {
                        const afterElement = getDragAfterElement(kanbanCards, e.clientY);
                        if (afterElement == null) {
                            kanbanCards.appendChild(draggedItem);
                        } else {
                            kanbanCards.insertBefore(draggedItem, afterElement);
                        }
                    }
                });

                column.addEventListener('drop', (e) => {
                    e.preventDefault();
                    if (draggedItem) {
                        const ticketId = parseInt(e.dataTransfer.getData('text/plain'));
                        const newStatusId = parseInt(column.dataset.statusId);

                        // Update the UI immediately
                        const kanbanCards = column.querySelector('.kanban-cards');
                        kanbanCards.appendChild(draggedItem); // Already moved in dragover, but confirm placement

                        // Send update to the server
                        updateTicketStatusOnServer(ticketId, newStatusId);
                    }
                });
            });

            function getDragAfterElement(container, y) {
                const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')];

                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;
                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }

            function updateTicketStatusOnServer(ticketId, newStatusId) {
                // Using jQuery AJAX
                $.ajax({
                    url: '@Url.Action("UpdateTicketStatus", "Tickets")', // Correctly generate the URL
                    type: 'POST',
                    data: {
                        ticketId: ticketId,
                        newStatusId: newStatusId
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Send Anti-forgery token
                    },
                    success: function (response) {
                        if (response.success) {
                            console.log(response.message);
                            // You might want to refresh only the specific ticket or column
                            // For now, a full refresh or a more sophisticated UI update can be considered.
                            // location.reload(); // Uncomment if you want to refresh the page after successful update
                        } else {
                            console.error("Error updating ticket status: " + response.message);
                            alert("Failed to update ticket status: " + response.message);
                            // Optionally, revert the UI change if the server update fails
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", status, error, xhr.responseText);
                        alert("An error occurred while communicating with the server.");
                        // Optionally, revert the UI change if the server update fails
                    }
                });
            }
        });
    </script>
}